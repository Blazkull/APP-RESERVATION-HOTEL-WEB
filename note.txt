app = FastAPI()

@app.on_event("startup")
def on_startup():
    create_db_and_tables()

# POST para crear una nueva reserva
@app.post("/reservations/", response_model=ReservationRead, status_code=201)
def create_reservation(reservation: ReservationCreate, session: Session = Depends(get_session)):
    db_reservation = Reservation(**reservation.dict())
    db_reservation.total = calculate_total_reservation(session, db_reservation)
    session.add(db_reservation)
    session.commit()
    session.refresh(db_reservation)
    return db_reservation

# GET para obtener una reserva por su ID
@app.get("/reservations/{reservation_id}", response_model=ReservationRead)
def read_reservation(reservation_id: int, session: Session = Depends(get_session)):
    db_reservation = session.get(Reservation, reservation_id)
    if db_reservation is None:
        raise HTTPException(status_code=404, detail="Reservation not found")
    return db_reservation

# GET para obtener todas las reservas
@app.get("/reservations/", response_model=List[ReservationRead])
def read_all_reservations(session: Session = Depends(get_session)):
    reservations = session.exec(select(Reservation)).all()
    return reservations

# PUT para actualizar una reserva existente
@app.put("/reservations/{reservation_id}", response_model=ReservationRead)
def update_reservation(reservation_id: int, reservation: ReservationUpdate, session: Session = Depends(get_session)):
    db_reservation = session.get(Reservation, reservation_id)
    if db_reservation is None:
        raise HTTPException(status_code=404, detail="Reservation not found")

    reservation_data = reservation.dict(exclude_unset=True)
    for key, value in reservation_data.items():
        setattr(db_reservation, key, value)

    db_reservation.total = calculate_total_reservation(session, db_reservation) # Recalcular el total si las fechas o la habitación cambian
    session.add(db_reservation)
    session.commit()
    session.refresh(db_reservation)
    return db_reservation

# DELETE para eliminar una reserva
@app.delete("/reservations/{reservation_id}", status_code=204)
def delete_reservation(reservation_id: int, session: Session = Depends(get_session)):
    db_reservation = session.get(Reservation, reservation_id)
    if db_reservation is None:
        raise HTTPException(status_code=404, detail="Reservation not found")
    session.delete(db_reservation)
    session.commit()
    return {"ok": True}



'''
 # Función para calcular el total (puedes colocarla en un archivo utils.py o en el mismo archivo de Reservation)
def calculate_total_reservation(session: Session, reservation: Reservation) -> Decimal:
    """Calcula el total de la reserva basado en las fechas y el precio por noche de la habitación."""
    room = session.exec(select(Room).where(Room.id == reservation.room_id)).first()
    if room:
        duration = reservation.check_out_date - reservation.check_in_date
        total = room.price_per_night * Decimal(duration.days)
        return total
    return Decimal(0.00)
 '''
